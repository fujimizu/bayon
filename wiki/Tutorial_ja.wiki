_Tutorial for bayon in Japanese_

*ver.0.0.5用にドキュメントを修正中です*

<wiki:toc />

= はじめに =

bayonは汎用的に利用できる[http://ja.wikipedia.org/wiki/データ・クラスタリング データクラスタリング]ツールで、現在は Repeated Bisection法 と [http://ja.wikipedia.org/wiki/K-means%E6%B3%95 K-means法] に対応しています。

シンプルな構成で、かつ大規模なデータに対しても高速に実行できるところが特徴です。大量のデータを俯瞰したいときに、似た者同士のグループにサクッと分けて確認する、といったユースケースに利用できます。

= 更新情報 =
 * 2009/07/13: 0.0.5リリース
  * 各入力ドキュメントに対し、別途入力されたベクトル群のどれに類似しているかを分類するオプションの追加
  * クラスタの中心ベクトルを出力するオプションを追加
  * idfオプションの追加
  * 乱数のseedをデフォルトでは固定にし、オプションで指定できるように変更

 * 2009/06/18: 0.0.4リリース
  * クラスタ中の各要素に対し、クラスタの中心との類似度を表示するオプションを追加
  * クラスタ中の各要素を出力する際に、クラスタの中心との類似度が高い順に出力するように変更
  * bug fix

 * 2009/06/10: 0.0.3リリース
  * Mac(OS X 10.5.7で検証)でコンパイルできるように変更

 * 2009/06/09: 0.0.2リリース

 * 2009/06/09: 0.0.1リリース

= ダウンロード =

[http://code.google.com/p/bayon/downloads/list 最新版のソースコード]をダウンロードしてください。

= インストール =

最新のソースコードをダウンロードして、以下のようにしてインストールしてください。make testを実行する場合は [http://code.google.com/p/googletest/ googletest] が必要となるため、事前にgoogletestをインストールしておいてください。

また[http://code.google.com/p/google-sparsehash/ google-sparsehash]がインストールされていると、さらに高速に実行できるようになるため、事前にインストールしておくことをお勧めします。

{{{
% tar xvzf bayon-*.tar.gz
% cd bayon-*
% ./configure
% make
% make check  (googletest をインストールしておく必要があります)
% sudo make install
}}}

= ツールの使用方法 =

== 入力データのクラスタリング ==

コマンドラインツールでクラスタリングを実行する場合は、以下のオプションを指定して実行してください。クラスタリング結果は標準出力に出力されます。

{{{
% bayon -n num [options] file
% bayon -l limit [options] file
   -n, --number=num      分割するクラスタの数
   -l, --limit=lim       分割ポイントの閾値
   -p, --point           各ドキュメントの所属クラスタへの所属度を出力
   -c, --clvector=file   クラスタの中心ベクトルの出力先ファイル
   --clvector-size=num   クラスタの中心ベクトルの最大要素数(デフォルトは50)
   --method=method       クラスタリング手法(rb, kmeans), デフォルトはrb
   --seed=seed           乱数のseed値を指定
}}}

=== クラスタ数を指定して実行する場合 ===

出力するクラスタの数を指定する場合は、以下のように *-n, --number* オプションを指定して実行してください。

{{{
(100個のクラスタに分割)
% bayon -n 100 input.tsv > output.tsv
}}}

=== 分割ポイントを指定して実行する場合 ===

クラスタ数をどの程度にすれば適切に分割されるかを事前に予想することが難しい場合は、分割ポイントの閾値を設定して実行する方法を使用すると、ある程度適切な分割が完了するまで分割をしてくれます。入力データにもよりますが、ポイントは1.0〜2.0程度を指定するとよいです。

{{{
(分割ポイントの閾値が1.0を下回るまで分割)
% bayon -l 1.0 input.tsv > output.tsv
}}}

=== クラスタリング手法を変える場合 ===

クラスタリング手法はデフォルトの設定ではrb(Repeated Bisection法)を使用します。K-meansを使用してクラスタリングを行いたい場合は、以下のように *--method* オプションでクラスタリング手法を指定して実行してください。

{{{
(クラスタリング手法にK-meansを使用して、100個のクラスタに分割)
% bayon -n 100 --method kmeans input.tsv > output.tsv
}}}

通常使用する場合は、kmeansと比べてrbの方が高速でかつ精度もよいため、rbのまま実行することをおすすめします。

=== クラスタの中心ベクトルを保存する場合 ===

各クラスタの中心ベクトルを保存する場合は、以下のように *-c, --clvector* オプションを指定して実行してください。中心ベクトルはオプションで指定されたファイルにテキスト形式で出力されます。

このとき、 *--clvector-size* オプションを使用すると、各中心ベクトル中に含まれるキー・ポイントペアの最大数を指定することができます。デフォルトでは50個の要素が出力されます。

{{{
(centroid.tsvに中心ベクトルを出力)
% bayon -n 100 -c centroid.tsv input.tsv > output.tsv

(中心ベクトルの要素数を最大20個に指定)
% bayon -n 100 -c centroid.tsv --clvector-size 20 input.tsv > output.tsv
}}}

=== 乱数のseed値を変更する場合 ===

bayonではクラスタリングを行う際に、要素の選択をランダムに行っている箇所があり、そのため乱数のseed値を変更することで異なるクラスタリング結果を得ることができます。デフォルトではseed値は固定になっているため、毎回同じクラスタリング結果が得られます。

{{{
(乱数のseed値に123456を指定してクラスタリングを実行)
% bayon -n 100 --seed 123456 input.tsv > output.tsv
}}}

ただし、乱数を変更してもクラスタリング結果の精度にはそれほどの影響はないと思いますので、デフォルト設定での出力結果の精度に満足がいかなかった場合は、seedを変更するのではなく、入力データの精査を行った方がよいかもしれません。

== 入力データの分類 ==

コマンドラインツールで入力データの分類を実行する場合は、以下のオプションを指定して実行してください。

{{{
% bayon -C file [options] file
   -C, --classify=file   分類先のベクトル
   --inv-keys=num        入力ドキュメントのベクトルに含まれるキーの内、
                         転置インデックスを引くキーの最大数(デフォルトは20)
   --inv-size=num        転置インデックス中で各キーに対して保存しておく
                         要素の最大数(デフォルトは100)
   --classify-size=num   各ドキュメントに対する分類結果(類似しているグループ)
                         の最大数(デフォルトは20)
}}}

== 共通オプション ==

以下のオプションは、クラスタリング・分類の両方で使用できます。

{{{
   --idf                 入力されたドキュメントベクトルに対しIDFを適用
   -h, --help            ヘルプメッセージを表示
   -v, --version         バージョン情報を表示
}}}

*--idf* オプションについては、 [Tutorial_ja#idfオプションで特徴的なキーを自動判定する] をご参照下さい。

= 入力データのフォーマット =

入力データは、以下のようにタブ区切りのフォーマットのテキストファイルにしてください。1行に1つのドキュメントの情報を記入し、空行は含めないようにしてください。各行は先頭にそのドキュメントのIDを記入し、IDの後はそのドキュメントの特徴を表すキーとそのポイントを記入してください。キーとポイントのペアは複数記入できますが、必ずペアで入力する必要があります。

{{{
document_id1 \t key1-1 \t value1-1 \t key1-2 \t value1-2 \t ...\n
document_id2 \t key2-1 \t value2-1 \t key2-2 \t value2-2 \t ...\n
...
}}}

各フィールドは以下を表しています。

 * _document_id_: 各ドキュメントのIDで、ドキュメント毎にユニークである必要があります。タブを含まない任意の文字列を使用できます。
 * _key_: ドキュメントの特徴を表す文字列です。タブを含まない任意の文字列が使用できます。
 * _value_: keyの特徴の度合いを表し、この値が高いほどより特徴的なフレーズになります。実数が使用できます。

valueは特徴の度合いを正しく反映している必要があります。そのため、例えば文書集合のクラスタリングを行う場合等では、単に単語の頻度を使うのではなく、[http://ja.wikipedia.org/wiki/Tf-idf tf-idf]などを使用して、より適切にポイントづけを行うことで、クラスタリングの精度を上げることができます。以下で述べるように、bayonでは *--idf* オプションを使用することで特徴的なキーを自動判定することができますので、ツールユーザ側で特徴的なキーを求めることが難しい場合は下記オプションをご利用下さい。

== idfオプションで特徴的なキーを自動判定する ==

クラスタリング・分類を実行する際に *--idf* オプションを使用すると、入力データの各キーに対し、特徴的なキーのポイントを上げ、逆にあまり特徴的ではないキーのポイントを下げてから、クラスタリング・分類を実行するようになります。

これによりクラスタリング・分類の精度向上が見込めます(データにはよっては精度が下がる場合もありえます)。またツールユーザが入力データを用意する際に、ユーザ側ではキーの特徴度合いを調べる必要がなくなり、単にキーの頻度を数えただけのデータでも *--idf* オプションを使用することで、高い精度の結果を得ることが可能になります。

idfの計算方法について詳しく知りたい方は、wikipediaの[http://ja.wikipedia.org/wiki/Tf-idf tf-idf]のページをご参照下さい。

== 入力データの例 ==

特徴として、よく聞く音楽のジャンルを使った入力例を示します。

{{{
阿佐田   J-POP       10   J-R&B       6   ロック  4
小島     ジャズ       8   レゲエ      9
古川     クラシック   4   ワールド    4
田村     ジャズ       9   メタル      2   レゲエ  6
青柳     J-POP        4   ロック      3   HIPHOP  3
三輪     クラシック   8   ロック      1
}}}

上記の例では「阿佐田」「小島」「古川」が各ドキュメントのID(人名)を表し、「阿佐田」の特徴を表すフレーズ(音楽のジャンル)として「J-POP」「J-R&B」「ロック」が挙げられています。

= 出力データのフォーマット =

== クラスタのリスト ==

出力データは、以下のようなタブ区切りのフォーマットのテキストになります。1行が1つのクラスタを表し、先頭がクラスタのID、それ以降はそのクラスタに所属するドキュメントのIDをタブ区切りでつなげたリストになります。

{{{
cluster_id1 \t document_id1 \t document_id2 \t document_id3 \t ...\n
cluster_id2 \t document_id4 \t document_id5 \t document_id6 \t ...\n
...
}}}

== クラスタのリスト(各ドキュメントのクラスタへの所属度も表示) ==

クラスタリングを実行する際に「-p, --point」オプションを使用すると、上記のクラスタリストに加えて、各ドキュメントの所属クラスタへの所属度を表示します。この所属度はドキュメントのベクトルと、クラスタの中心ベクトル間のcosine類似度で計算しており、-1.0〜1.0の値を取ります。

{{{
cluster_id1 \t document_id1 \t point1 \t document_id2 \t point2 \t ...\n
cluster_id2 \t document_id3 \t point3 \t document_id4 \t point4 \t ...\n
...
}}}

== クラスタの中心ベクトルのリスト ==

クラスタリングを実行する際に「-c, --clvector=file」オプションを使用すると、指定した出力ファイルにクラスタの中心ベクトルのリストを出力します。

出力データのフォーマットは以下のようなタブ区切りのテキストになります。1行が1つのクラスタを表し、先頭がクラスタのID、それ以降は中心ベクトルになります。

{{{
cluster_id1 \t key1-1 \t value1-1 \t key1-2 \t value1-2 \t ...\n
cluster_id2 \t key2-1 \t value2-1 \t key2-2 \t value2-2 \t ...\n
...
}}}

== 出力データの例 ==

上記の音楽のジャンルを使用した例を3つのクラスタに分割したときの出力は、以下になります。

{{{
1       小島    田村
2       阿佐田  青柳
3       古川    三輪
}}}

= クラスタリング手法の説明 =

== Repeated Bisection ==

bayonでは、Repeated Bisectionと呼ばれるクラスタリング手法を採用しています。Repeated Bisectionはクラスタリングツール[[http://glaros.dtc.umn.edu/gkhome/views/cluto CLUTO]で使用されているクラスタリング手法で、データ集合を繰り返し2分割することでクラスタリングを実行します。K-means法などと比較して、高速に実行でき、また精度も良好なようです。

より詳しく説明しますと、 Repeated Bisectionは以下の1-4の処理を実行し、繰り返しクラスタを2分割していくことでクラスタリングを行います。


 # 分割するクラスタを1つ選択する(一番クラスタ内のまとまりが悪いものを選択)
 # クラスタ中からランダムに2つ要素を選択し、それぞれが格納したクラスタを2つ作成する
 # 元のクラスタ中の全ての要素に対し、2で選んだ要素との類似度を求め、類似度が高い方のクラスタに要素を追加する
 # 2クラスタ間で要素の移動を行い、分割結果の洗練を行う(移動できる要素がなくなるまで続ける)

[http://mahjong-mania.net/bayon/img/rb.png]

ここで、2-4のプロセスだけに注目してみると、これはクラスタの中心を2つとしてK-means法を実行しているのと同じことをしています。つまりRepeated BisectionはK-meansを繰り返し実行しているだけなのです。

プロセス1でまとまりの悪いクラスタを選択するとき、プロセス4で要素を移動してクラスタの洗練を行うときは、クラスタのまとまり具合を評価する必要があります。このクラスタの評価は、クラスタの各要素とクラスタの中心とのcosine類似度の和としています。この和が大きいほどクラスタの中心に凝集しているようになり、クラスタ中のデータが似た者同士の集まりである、と考えるわけです。ただし、クラスタ中の各要素と中心との類似度をまじめに全て比較するのは計算量も高くなってしまいます。実際には、この値はクラスタ中のベクトルをすべて足した複合ベクトルの長さと同値になり、そのため計算量も少なく評価値を求めることができます。

詳しくは[http://glaros.dtc.umn.edu/gkhome/views/cluto CLUTO]のサイトから論文を参照してください。

== K-means ==

K-meansについては、Wikipediaの[http://ja.wikipedia.org/wiki/K-means%E6%B3%95 K-means法のページ]など、説明をしているwebページがたくさんあるのでそちらをご参照下さい。